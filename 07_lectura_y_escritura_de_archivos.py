# Archivo: 07_lectura_y_escritura_de_archivos.py
# Tema: Lectura y escritura de archivos en Python
# Descripci√≥n: Este script explica c√≥mo leer y escribir archivos de texto en Python, incluyendo ejemplos comentados y manejo de errores.

# -------------------------------
# üìå 1. Escribir en un archivo
# -------------------------------
# Usamos 'open' con modo 'w' (escribir) o 'a' (a√±adir) para escribir texto en un archivo.
# El bloque 'with' asegura que el archivo se cierre autom√°ticamente.

texto = "Hola, este es un ejemplo de escritura en un archivo.\nSegunda l√≠nea de texto."

try:
    with open("ejemplo.txt", "w", encoding="utf-8") as archivo:
        archivo.write(texto)
    print("‚úÖ Archivo escrito correctamente.")
except Exception as e:
    print(f"‚ùå Error al escribir el archivo: {e}")

# -------------------------------
# üìå 2. Leer todo el contenido de un archivo
# -------------------------------
# Usamos 'open' con modo 'r' (lectura) para leer el contenido completo.

try:
    with open("ejemplo.txt", "r", encoding="utf-8") as archivo:
        contenido = archivo.read()
    print("üìÑ Contenido del archivo:")
    print(contenido)
except FileNotFoundError:
    print("‚ùå El archivo no existe.")
except Exception as e:
    print(f"‚ùå Error al leer el archivo: {e}")

# -------------------------------
# üìå 3. Leer l√≠nea por l√≠nea
# -------------------------------
# Podemos iterar sobre el archivo para leerlo l√≠nea por l√≠nea.

try:
    with open("ejemplo.txt", "r", encoding="utf-8") as archivo:
        print("üìÑ Lectura l√≠nea por l√≠nea:")
        for linea in archivo:
            print(linea.strip())  # strip() elimina saltos de l√≠nea
except Exception as e:
    print(f"‚ùå Error al leer l√≠nea por l√≠nea: {e}")

# -------------------------------
# üìå 4. A√±adir contenido a un archivo existente
# -------------------------------
# Usamos el modo 'a' para agregar texto sin borrar el contenido anterior.

try:
    with open("ejemplo.txt", "a", encoding="utf-8") as archivo:
        archivo.write("\nNueva l√≠nea a√±adida al archivo.")
    print("‚úÖ L√≠nea a√±adida correctamente.")
except Exception as e:
    print(f"‚ùå Error al a√±adir contenido: {e}")

# -------------------------------
# ‚úÖ Conclusi√≥n
# -------------------------------
# Python permite trabajar f√°cilmente con archivos de texto usando 'open'.
# El uso de 'with' garantiza el cierre autom√°tico del archivo.
# Podemos leer todo el contenido, l√≠nea por l√≠nea, escribir o a√±adir texto.
# Es importante manejar errores para evitar fallos si el archivo no existe o hay problemas de acceso.

# Fin del archivo
